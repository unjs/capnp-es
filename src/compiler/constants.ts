// Based on https://github.com/jdiaz5513/capnp-ts (MIT - Julián Díaz)

import * as schema from "../capnp/schema";

/** A Mapping of various types to their list type constructor. */
export const ConcreteListType = {
  [schema.Type.ANY_POINTER]: "$.AnyPointerList",
  [schema.Type.BOOL]: "$.BoolList",
  [schema.Type.DATA]: "$.DataList",
  [schema.Type.ENUM]: "$.Uint16List",
  [schema.Type.FLOAT32]: "$.Float32List",
  [schema.Type.FLOAT64]: "$.Float64List",
  [schema.Type.INT16]: "$.Int16List",
  [schema.Type.INT32]: "$.Int32List",
  [schema.Type.INT64]: "$.Int64List",
  [schema.Type.INT8]: "$.Int8List",
  [schema.Type.INTERFACE]: "$.InterfaceList",
  [schema.Type.LIST]: "$.PointerList",
  [schema.Type.STRUCT]: "$.CompositeList",
  [schema.Type.TEXT]: "$.TextList",
  [schema.Type.UINT16]: "$.Uint16List",
  [schema.Type.UINT32]: "$.Uint32List",
  [schema.Type.UINT64]: "$.Uint64List",
  [schema.Type.UINT8]: "$.Uint8List",
  [schema.Type.VOID]: "$.VoidList",
};

/** Some data used to help generate code for primitive struct fields. */
export const Primitives: {
  [t: number]: {
    byteLength: number;
    getter: string;
    mask: string;
    setter: string;
  };
} = {
  [schema.Type.BOOL]: {
    byteLength: 1,
    getter: "getBit",
    mask: "getBitMask",
    setter: "setBit",
  },
  [schema.Type.ENUM]: {
    byteLength: 2,
    getter: "getUint16",
    mask: "getUint16Mask",
    setter: "setUint16",
  },
  [schema.Type.FLOAT32]: {
    byteLength: 4,
    getter: "getFloat32",
    mask: "getFloat32Mask",
    setter: "setFloat32",
  },
  [schema.Type.FLOAT64]: {
    byteLength: 8,
    getter: "getFloat64",
    mask: "getFloat64Mask",
    setter: "setFloat64",
  },
  [schema.Type.INT16]: {
    byteLength: 2,
    getter: "getInt16",
    mask: "getInt16Mask",
    setter: "setInt16",
  },
  [schema.Type.INT32]: {
    byteLength: 4,
    getter: "getInt32",
    mask: "getInt32Mask",
    setter: "setInt32",
  },
  [schema.Type.INT64]: {
    byteLength: 8,
    getter: "getInt64",
    mask: "getInt64Mask",
    setter: "setInt64",
  },
  [schema.Type.INT8]: {
    byteLength: 1,
    getter: "getInt8",
    mask: "getInt8Mask",
    setter: "setInt8",
  },
  [schema.Type.UINT16]: {
    byteLength: 2,
    getter: "getUint16",
    mask: "getUint16Mask",
    setter: "setUint16",
  },
  [schema.Type.UINT32]: {
    byteLength: 4,
    getter: "getUint32",
    mask: "getUint32Mask",
    setter: "setUint32",
  },
  [schema.Type.UINT64]: {
    byteLength: 8,
    getter: "getUint64",
    mask: "getUint64Mask",
    setter: "setUint64",
  },
  [schema.Type.UINT8]: {
    byteLength: 1,
    getter: "getUint8",
    mask: "getUint8Mask",
    setter: "setUint8",
  },
  [schema.Type.VOID]: {
    byteLength: 0,
    getter: "getVoid",
    mask: "getVoidMask",
    setter: "setVoid",
  },
};

export const SOURCE_COMMENT = `// This file has been automatically generated by capnp-es.\n`;

/**
 * Used to look up the ts.capnp file by its ID.
 *
 * NOTE: The file ID should never change.
 */
export const TS_FILE_ID = "e37ded525a68a7c9";
